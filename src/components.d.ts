/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FlexDirection, FlexWrap, ResponsiveProp } from "./components/flexy-container/flexy-container";
import { FlexAlign } from "./components/flexy-item/flexy-item";
export { FlexDirection, FlexWrap, ResponsiveProp } from "./components/flexy-container/flexy-container";
export { FlexAlign } from "./components/flexy-item/flexy-item";
export namespace Components {
    interface FxyContainer {
        /**
          * Sets the `place-content` value for aligning content within the container. Accepts a combination of `justify-content` and `align-content` values. Example: "center space-around".
         */
        "fxyAlign": string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor large devices
         */
        "fxyAlignLg": string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor medium devices
         */
        "fxyAlignMd": string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor small devices
         */
        "fxyAlignSm": string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor extra large devices
         */
        "fxyAlignXl": string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor extra-small devices
         */
        "fxyAlignXs": string;
        /**
          * Sets the flex-direction of the container.  Can be "row", "row-reverse", "column", or "column-reverse".
         */
        "fxyDirection": ResponsiveProp<FlexDirection>;
        /**
          * Flex direction for large devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionLg": FlexDirection;
        /**
          * Flex direction for medium devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionMd": FlexDirection;
        /**
          * Flex direction for small devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionSm": FlexDirection;
        /**
          * Flex direction for extra-large devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionXl": FlexDirection;
        /**
          * Flex direction for extra-small devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionXs": FlexDirection;
        /**
          * If `true`, the container will fill its parent's height and width.
         */
        "fxyFill": boolean;
        /**
          * If `true`, the container will fill its parent's height and width on large devices.
         */
        "fxyFillLg": boolean;
        /**
          * If `true`, the container will fill its parent's height and width on medium devices.
         */
        "fxyFillMd": boolean;
        /**
          * If `true`, the container will fill its parent's height and width on small devices.
         */
        "fxyFillSm": boolean;
        /**
          * If `true`, the container will fill its parent's height and width on extra large devices.
         */
        "fxyFillXl": boolean;
        /**
          * If `true`, the container will fill its parent's height and width on extra small devices.
         */
        "fxyFillXs": boolean;
        /**
          * Sets spacing between immediate child elements (`fxy-item`). The value is applied as a right margin to all children except the last one.
         */
        "fxyGap": string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for large devices..
         */
        "fxyGapLg": string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for medium devices..
         */
        "fxyGapMd": string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for small devices..
         */
        "fxyGapSm": string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for extra large devices..
         */
        "fxyGapXl": string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for extra small devices..
         */
        "fxyGapXs": string;
        /**
          * Sets the flex-wrap property of the container.
         */
        "fxyWrap": FlexWrap;
        /**
          * Sets the flex-wrap property of the container for large devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapLg": FlexWrap;
        /**
          * Sets the flex-wrap property of the container for medium devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapMd": FlexWrap;
        /**
          * Sets the flex-wrap property of the container for small devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapSm": FlexWrap;
        /**
          * Sets the flex-wrap property of the container for extra large devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapXl": FlexWrap;
        /**
          * Sets the flex-wrap property of the container for extra small devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapXs": FlexWrap;
    }
    interface FxyItem {
        /**
          * A shorthand for setting flex-grow, flex-shrink, and flex-basis. Accepts standard CSS flex property values or a valid unit of measurement applied as a width and flex-basis.
         */
        "fxy": string;
        /**
          * Align self. Allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
         */
        "fxyAlign": FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on large devices.
         */
        "fxyAlignLg": FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on medium devices.
         */
        "fxyAlignMd": FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on small devices.
         */
        "fxyAlignSm": FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on extra large devices.
         */
        "fxyAlignXl": FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on extra small devices.
         */
        "fxyAlignXs": FlexAlign;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for large devices.
         */
        "fxyLg": string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for medium devices.
         */
        "fxyMd": string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for small devices.
         */
        "fxySm": string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for extra large devices.
         */
        "fxyXl": string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for extra small devices.
         */
        "fxyXs": string;
    }
}
declare global {
    interface HTMLFxyContainerElement extends Components.FxyContainer, HTMLStencilElement {
    }
    var HTMLFxyContainerElement: {
        prototype: HTMLFxyContainerElement;
        new (): HTMLFxyContainerElement;
    };
    interface HTMLFxyItemElement extends Components.FxyItem, HTMLStencilElement {
    }
    var HTMLFxyItemElement: {
        prototype: HTMLFxyItemElement;
        new (): HTMLFxyItemElement;
    };
    interface HTMLElementTagNameMap {
        "fxy-container": HTMLFxyContainerElement;
        "fxy-item": HTMLFxyItemElement;
    }
}
declare namespace LocalJSX {
    interface FxyContainer {
        /**
          * Sets the `place-content` value for aligning content within the container. Accepts a combination of `justify-content` and `align-content` values. Example: "center space-around".
         */
        "fxyAlign"?: string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor large devices
         */
        "fxyAlignLg"?: string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor medium devices
         */
        "fxyAlignMd"?: string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor small devices
         */
        "fxyAlignSm"?: string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor extra large devices
         */
        "fxyAlignXl"?: string;
        /**
          * Sets the `place-content` value for aligning content within the containerfor extra-small devices
         */
        "fxyAlignXs"?: string;
        /**
          * Sets the flex-direction of the container.  Can be "row", "row-reverse", "column", or "column-reverse".
         */
        "fxyDirection"?: ResponsiveProp<FlexDirection>;
        /**
          * Flex direction for large devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionLg"?: FlexDirection;
        /**
          * Flex direction for medium devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionMd"?: FlexDirection;
        /**
          * Flex direction for small devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionSm"?: FlexDirection;
        /**
          * Flex direction for extra-large devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionXl"?: FlexDirection;
        /**
          * Flex direction for extra-small devices. Accepts 'row', 'row-reverse', 'column', 'column-reverse'.
         */
        "fxyDirectionXs"?: FlexDirection;
        /**
          * If `true`, the container will fill its parent's height and width.
         */
        "fxyFill"?: boolean;
        /**
          * If `true`, the container will fill its parent's height and width on large devices.
         */
        "fxyFillLg"?: boolean;
        /**
          * If `true`, the container will fill its parent's height and width on medium devices.
         */
        "fxyFillMd"?: boolean;
        /**
          * If `true`, the container will fill its parent's height and width on small devices.
         */
        "fxyFillSm"?: boolean;
        /**
          * If `true`, the container will fill its parent's height and width on extra large devices.
         */
        "fxyFillXl"?: boolean;
        /**
          * If `true`, the container will fill its parent's height and width on extra small devices.
         */
        "fxyFillXs"?: boolean;
        /**
          * Sets spacing between immediate child elements (`fxy-item`). The value is applied as a right margin to all children except the last one.
         */
        "fxyGap"?: string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for large devices..
         */
        "fxyGapLg"?: string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for medium devices..
         */
        "fxyGapMd"?: string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for small devices..
         */
        "fxyGapSm"?: string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for extra large devices..
         */
        "fxyGapXl"?: string;
        /**
          * Sets spacing between immediate child elements (`fxy-item`) for extra small devices..
         */
        "fxyGapXs"?: string;
        /**
          * Sets the flex-wrap property of the container.
         */
        "fxyWrap"?: FlexWrap;
        /**
          * Sets the flex-wrap property of the container for large devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapLg"?: FlexWrap;
        /**
          * Sets the flex-wrap property of the container for medium devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapMd"?: FlexWrap;
        /**
          * Sets the flex-wrap property of the container for small devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapSm"?: FlexWrap;
        /**
          * Sets the flex-wrap property of the container for extra large devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapXl"?: FlexWrap;
        /**
          * Sets the flex-wrap property of the container for extra small devices.. Can be "nowrap", "wrap", or "wrap-reverse".
         */
        "fxyWrapXs"?: FlexWrap;
    }
    interface FxyItem {
        /**
          * A shorthand for setting flex-grow, flex-shrink, and flex-basis. Accepts standard CSS flex property values or a valid unit of measurement applied as a width and flex-basis.
         */
        "fxy"?: string;
        /**
          * Align self. Allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
         */
        "fxyAlign"?: FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on large devices.
         */
        "fxyAlignLg"?: FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on medium devices.
         */
        "fxyAlignMd"?: FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on small devices.
         */
        "fxyAlignSm"?: FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on extra large devices.
         */
        "fxyAlignXl"?: FlexAlign;
        /**
          * A shorthand modifier of for fxyAlign that sets the flex child element alignment on extra small devices.
         */
        "fxyAlignXs"?: FlexAlign;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for large devices.
         */
        "fxyLg"?: string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for medium devices.
         */
        "fxyMd"?: string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for small devices.
         */
        "fxySm"?: string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for extra large devices.
         */
        "fxyXl"?: string;
        /**
          * A shorthand modifier of fxy for setting flex-grow, flex-shrink, and flex-basis for extra small devices.
         */
        "fxyXs"?: string;
    }
    interface IntrinsicElements {
        "fxy-container": FxyContainer;
        "fxy-item": FxyItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fxy-container": LocalJSX.FxyContainer & JSXBase.HTMLAttributes<HTMLFxyContainerElement>;
            "fxy-item": LocalJSX.FxyItem & JSXBase.HTMLAttributes<HTMLFxyItemElement>;
        }
    }
}
